@model IQueryable<Person>

@{
    ViewBag.Title = "Grid events";
}

<div class="widget example">
    <div class="widget-header">
        <div class="fa fa-bars"></div>
        <span>Preview</span>
        <div class="widget-buttons">
            <span id="ContentRefresh" class="fa fa-refresh"></span>
        </div>
    </div>
    <div class="widget-content">
        @await Html.PartialAsync("_EventsGrid")
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="widget code">
            <div class="widget-header">
                <div class="fa fa-code"></div>
                <span>Controller</span>
            </div>
            <div class="widget-content">
<pre>
<code>
[<span class="cls">HttpGet</span>]
<span class="kwd">public</span> <span class="cls">ActionResult</span> Index()
{
    <span class="kwd">if</span> (HttpContext.Request.Headers[<span class="str">"X-Requested-With"</span>] == <span class="str">"XMLHttpRequest"</span>)
        <span class="kwd">return</span> PartialView(<span class="str">"_IndexGrid"</span>, repository.GetPeople());

    <span class="kwd">return</span> View();
}
</code>
</pre>
            </div>
        </div>
        <div class="widget code">
            <div class="widget-header">
                <div class="fa fa-code"></div>
                <span>Main view</span>
            </div>
            <div class="widget-content">
<pre>
<code>
@@Html.AjaxGrid(Url.Action(<span class="str">"Index"</span>))
</code>
</pre>
            </div>
        </div>
        <div class="widget code">
            <div class="widget-header">
                <div class="fa fa-code"></div>
                <span>_IndexGrid partial view</span>
            </div>
            <div class="widget-content">
<pre>
<code>
@@model <span class="cls">IQueryable</span>&lt;<span class="cls">Person</span>&gt;

<span class="com">@@* Should only include grid declaration *@@</span>

@@(Html
    .Grid(Model)
    .Build(columns =>
    {
        columns.Add(model => model.Name).Titled(<span class="str">"Name"</span>);
        columns.Add(model => model.Surname).Titled(<span class="str">"Surname"</span>);
        columns.Add(model => model.MaritalStatus).Titled(<span class="str">"Marital status"</span>);

        columns.Add(model => <span class="cls">DateTime</span>.Now).Titled(<span class="str">"Time stamp"</span>);
    })
)
</code>
</pre>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="widget code">
            <div class="widget-header">
                <div class="fa fa-code"></div>
                <span>Javascript</span>
            </div>
            <div class="widget-content">
<pre>
<code>
<span class="kwd">const</span> grid = document.querySelector(<span class="str">".mvc-grid"</span>);

<span class="com">// Triggered when grid's row is clicked. It's recommended to use event delegation in ajax scenarios.</span>
document.addEventListener(<span class="str">"rowclick"</span>, e => {
    <span class="com">e.detail.data - clicked row's data from columns.</span>
    <span class="com">e.detail.grid - grid's instance.</span>
    <span class="com">e.detail.originalEvent - original tr click event which triggered the rowclick.</span>
});

<span class="com">// Triggered before grid starts loading. It's recommended to use event delegation in ajax scenarios.</span>
document.addEventListener(<span class="str">"reloadstart"</span>, e => {
    <span class="com">e.detail.grid - grid's instance.</span>
});

<span class="com">// Triggered after grid stop loading. It's recommended to use event delegation in ajax scenarios.</span>
document.addEventListener(<span class="str">"reloadend"</span>, e => {
    <span class="com">e.detail.grid - grid's instance.</span>
});

<span class="com">// Triggered after grid reload fails. It's recommended to use event delegation in ajax scenarios.</span>
document.addEventListener(<span class="str">"reloadfail"</span>, e => {
    <span class="com">e.detail.reason - failed response promise reason.</span>
    <span class="com">e.detail.grid - grid's instance.</span>

    <span class="com">// Preventing default stops failed promise from bubbling out.</span>
});

<span class="com">// Triggered after grid configuration changes. It's recommended to use event delegation in ajax scenarios.</span>
document.addEventListener(<span class="str">"gridconfigure"</span>, e => {
    <span class="com">e.detail.grid - grid's instance.</span>
});
</code>
</pre>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        document.getElementById("ContentRefresh").addEventListener("click", () => {
            new MvcGrid(document.querySelector(".mvc-grid")).reload();
        });
    </script>
}
